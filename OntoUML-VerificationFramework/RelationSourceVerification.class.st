"
I am verification for RelationSource rule. 

Overriden methods: verifiedClass, verifyObject:withModel:

New methods: validSources.
"
Class {
	#name : 'RelationSourceVerification',
	#superclass : 'RelationEndVerification',
	#traits : 'TCodeInjectionChecker + TClassUpdater',
	#classTraits : 'TCodeInjectionChecker classTrait + TClassUpdater classTrait',
	#category : 'OntoUML-VerificationFramework-Verification-Classes',
	#package : 'OntoUML-VerificationFramework',
	#tag : 'Verification-Classes'
}

{ #category : 'constants' }
RelationSourceVerification class >> abbreviation [
	^ 'RelationSource'.
]

{ #category : 'updating' }
RelationSourceVerification class >> getUpdatedMessageCode: aVerificationUpdater [
	| validSourcesCode |
	validSourcesCode := '"I return dictionary containing collections of allowed sources for each OntoUML relationship stereotype.
Code generated by getUpdatedMessageCode."
validSources
	| result |
	result := Dictionary new.'.
	aVerificationUpdater relationshipSpecifications
		do: [ :relationshipSpecification | self checkStringForCodeInjection: relationshipSpecification name.
			validSourcesCode := validSourcesCode , (String with: Character cr)
				, '	result add: self validSourcesFor'
				, relationshipSpecification name , '.' ].
	validSourcesCode := validSourcesCode , (String with: Character cr)
		, '	^ result.'.
	^ validSourcesCode.
]

{ #category : 'updating' }
RelationSourceVerification class >> getValidSourcesFor: aRelationship fromCollection: aCollection [
	| methodTemplate |
	self checkStringForCodeInjection: aRelationship.
	methodTemplate := '"I return association between OntoUML relationship stereotype '
		, aRelationship , ' and its allowed sources.
I am generated by getValidSourcesFor:FromCollection: and tested by testGetValidSourcesForFromCollection."'
		, (String with: Character cr) , 'validSourcesFor' , aRelationship
		, (String with: Character cr) , '	^ OntoUML' , aRelationship , ' -> { '.
	aCollection
		do: [ :item | self checkStringForCodeInjection: item.
			 methodTemplate := methodTemplate , 'OntoUML' , item , '. '. ].
	methodTemplate := methodTemplate , '}.'.
	^ methodTemplate.
]

{ #category : 'updating' }
RelationSourceVerification class >> setValidSourcesFor: aStereotype fromCollection: aCollection [
	| validSourcesForCode |
	validSourcesForCode := self getValidSourcesFor: aStereotype fromCollection: aCollection.
	self updateMessage: validSourcesForCode withClassification: 'constants'.
]

{ #category : 'updating' }
RelationSourceVerification class >> updateFrom: aVerificationUpdater [
	| updatedMessageCode |
	updatedMessageCode := self getUpdatedMessageCode: aVerificationUpdater.
	aVerificationUpdater relationshipSpecifications do: [ :relationshipSpecification |
		self setValidSourcesFor: relationshipSpecification name fromCollection: 
		(self expandAllowedClassStereotypesIn: (relationshipSpecification allowedSources) from: aVerificationUpdater). ]. 	
	self updateMessage: updatedMessageCode  withClassification: 'constants'.
	
]

{ #category : 'constants' }
RelationSourceVerification class >> validSources [
	| result |
	result := Dictionary new.
	result add: self validSourcesForComponentOf.
	result add: self validSourcesForContainment.
	result add: self validSourcesForMemberOf.
	result add: self validSourcesForSubCollectionOf.
	result add: self validSourcesForSubQuantityOf.
	result add: self validSourcesForCharacterization.
	result add: self validSourcesForDerivation.
	result add: self validSourcesForDomainFormal.
	result add: self validSourcesForMaterial.
	result add: self validSourcesForMediation.
	^ result.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForCharacterization [
	^ OntoUMLCharacterization -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForComponentOf [
	^ OntoUMLComponentOf -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForContainment [
	^ OntoUMLContainment -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForDerivation [
	^ OntoUMLDerivation -> { OntoUMLRelator. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForDomainFormal [
	^ OntoUMLDomainFormal -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForFormal [
	^ OntoUMLFormal -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForMaterial [
	^ OntoUMLMaterial -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForMediation [
	^ OntoUMLMediation -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForMemberOf [
	^ OntoUMLMemberOf -> { OntoUMLCollective. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForSubCollectionOf [
	^ OntoUMLSubCollectionOf -> { OntoUMLCollective. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> validSourcesForSubQuantityOf [
	^ OntoUMLSubQuantityOf -> { OntoUMLQuantity. }.
]

{ #category : 'constants' }
RelationSourceVerification class >> verifiedClass [
	^ OPUMLAssociation.
]

{ #category : 'verification' }
RelationSourceVerification >> getErrorMessageFor: aEnd withAssociation: aAssociation [
	| endStereotypeName associationStereotypeName |
	endStereotypeName := (self class getStereotypeClass: aEnd) name.
	associationStereotypeName := (self class getStereotypeClass: aAssociation) name.
	^ VerificationMessageError createFor: aAssociation
			withVerification: self
			withText: endStereotypeName , ' cannot be source of ' , associationStereotypeName , ' association'.
]

{ #category : 'verification' }
RelationSourceVerification >> getVerifiedEnd: aVerifiedAssociation [
	^ (aVerifiedAssociation memberEnds at: 1) type.
]

{ #category : 'verification' }
RelationSourceVerification >> validStereotypesForEnd [
	^ self class validSources.
]
