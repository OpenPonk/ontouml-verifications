"
I am verification for AllowedSupertypes rule. 

Overriden methods: verifiedClass, verifyObject:withModel:

New methods: validSupertypes.
"
Class {
	#name : #AllowedSupertypesVerification,
	#superclass : #Verification,
	#traits : 'TCodeInjectionChecker + TClassUpdater',
	#classTraits : 'TCodeInjectionChecker classTrait + TClassUpdater classTrait',
	#category : #'OntoUML-VerificationFramework-Verification-Classes'
}

{ #category : #constants }
AllowedSupertypesVerification class >> abbreviation [
	^ 'AllowedSupertypes'.
]

{ #category : #updating }
AllowedSupertypesVerification class >> getUpdatedMessageCode: aVerificationUpdater [
	| validSupertypesCode |
	validSupertypesCode := '"I return dictionary containing collections of allowed supertypes for each OntoUML element stereotype.
Code generated by getUpdatedMessageCode."
validSupertypes
	| result |
	result := Dictionary new.'.
	aVerificationUpdater classSpecifications
		do: [ :classSpecification | self checkStringForCodeInjection: classSpecification name.
			validSupertypesCode := validSupertypesCode , (String with: Character cr)
				, '	result add: self validSupertypesFor' , classSpecification name
				, '.' ].
	validSupertypesCode := validSupertypesCode , (String with: Character cr)
		, '	^ result.'.
	^ validSupertypesCode.
]

{ #category : #updating }
AllowedSupertypesVerification class >> getValidSupertypesForCode: aStereotype fromCollection: aCollection [
	| methodTemplate |
	self checkStringForCodeInjection: aStereotype.
	methodTemplate := '"I return association between OntoUML element stereotype '
		, aStereotype , ' and its allowed supertypes.', (String with: Character cr)
		, ' I am generated by getValidSupertypesFor:FromCollection: and tested by testValidSupertypesFor"'
		, (String with: Character cr) , 'validSupertypesFor' , aStereotype
		, (String with: Character cr) , '	^ OntoUML' , aStereotype , ' -> { '.
	aCollection
		do: [ :item | self checkStringForCodeInjection: item.
			 methodTemplate := methodTemplate , 'OntoUML' , item , '. ' ].
	methodTemplate := methodTemplate , '}.'.
	^ methodTemplate.
]

{ #category : #updating }
AllowedSupertypesVerification class >> setValidSupertypesFor: aStereotype fromCollection: aCollection [
	| validSupertypesForCode |
	validSupertypesForCode := self getValidSupertypesForCode: aStereotype fromCollection: aCollection.
	self updateMessage: validSupertypesForCode withClassification: 'constants'.
]

{ #category : #updating }
AllowedSupertypesVerification class >> updateFrom: aVerificationUpdater [
	| updatedMessageCode |
	updatedMessageCode := self getUpdatedMessageCode: aVerificationUpdater.
	aVerificationUpdater classSpecifications do: [ :classSpecification |
		self setValidSupertypesFor: classSpecification name fromCollection: classSpecification supertypes. ]. 	
	self updateMessage: updatedMessageCode  withClassification: 'constants'.
	
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypes [
	| result |
	result := Dictionary new.
	result add: self validSupertypesForKind.
	result add: self validSupertypesForSubKind.
	result add: self validSupertypesForCollective.
	result add: self validSupertypesForPhase.
	result add: self validSupertypesForQuantity.
	result add: self validSupertypesForRelator.
	result add: self validSupertypesForRole.
	result add: self validSupertypesForMode.
	result add: self validSupertypesForQuality.
	result add: self validSupertypesForCategory.
	result add: self validSupertypesForMixin.
	result add: self validSupertypesForRoleMixin.
	result add: self validSupertypesForPhaseMixin.
	^ result.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForCategory [
	^ OntoUMLCategory -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForCollective [
	^ OntoUMLCollective -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForKind [
	^ OntoUMLKind -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForMixin [
	^ OntoUMLMixin -> { OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForMode [
	^ OntoUMLMode -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForPhase [
	^ OntoUMLPhase -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLQuantity. OntoUMLRelator. OntoUMLPhase. OntoUMLRole. OntoUMLMixin. OntoUMLPhaseMixin. OntoUMLMode. OntoUMLQuality. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForPhaseMixin [
	^ OntoUMLPhaseMixin -> { OntoUMLMixin. OntoUMLPhaseMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForQuality [
	^ OntoUMLQuality -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForQuantity [
	^ OntoUMLQuantity -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForRelator [
	^ OntoUMLRelator -> { OntoUMLCategory. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForRole [
	^ OntoUMLRole -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLRoleMixin. OntoUMLMixin. OntoUMLMode. OntoUMLQuality. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForRoleMixin [
	^ OntoUMLRoleMixin -> { OntoUMLMixin. OntoUMLRoleMixin. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> validSupertypesForSubKind [
	^ OntoUMLSubKind -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLQuantity. OntoUMLRelator. OntoUMLCategory. OntoUMLMixin. OntoUMLMode. OntoUMLQuality. }.
]

{ #category : #constants }
AllowedSupertypesVerification class >> verifiedClass [
	^ OPUMLGeneralization.
]

{ #category : #verification }
AllowedSupertypesVerification >> verifyObject: aVerifiedGeneralization withModel: aVerifiedModel [
	| generalStereotype specificStereotype |	
	generalStereotype := self class getStereotype: aVerifiedGeneralization general.
	specificStereotype := self class getStereotype: aVerifiedGeneralization specific.
	(generalStereotype isNil or: specificStereotype isNil) ifTrue: [ ^ {} ].
	((self class validSupertypes at: specificStereotype class) 
		anySatisfy: [ :class | generalStereotype class = class ])
			ifFalse:[ ^ {VerificationMessageError createFor: aVerifiedGeneralization withVerification: self withText: (generalStereotype class name , ' cannot be supertype of ' , specificStereotype class name ,'.') documentationReference: (OntoUMLDotOrgReferences getDefinitionReferenceFor: aVerifiedGeneralization general ) } ].
	^ {}.
]
