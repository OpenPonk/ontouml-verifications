"
I am verification for AllowedSubtypes rule. 

Overriden methods: verifiedClass, verifyObject:withModel:

New methods: validSubtypes.
"
Class {
	#name : #AllowedSubtypesVerification,
	#superclass : #Verification,
	#traits : 'TCodeInjectionChecker + TClassUpdater',
	#classTraits : 'TCodeInjectionChecker classTrait + TClassUpdater classTrait',
	#category : #'OntoUML-VerificationFramework-Verification-Classes'
}

{ #category : #constants }
AllowedSubtypesVerification class >> abbreviation [
	^ 'AllowedSubtypes'.
]

{ #category : #updating }
AllowedSubtypesVerification class >> getUpdatedMessageCode: aVerificationUpdater [
	| validSubtypesCode |
	validSubtypesCode := '"I return dictionary containing collections of allowed subtypes for each OntoUML element stereotype.
Code generated by getUpdatedMessageCode."
validSubtypes
	| result |
	result := Dictionary new.'.
	aVerificationUpdater classSpecifications
		do: [ :classSpecification | self checkStringForCodeInjection: classSpecification name.
			validSubtypesCode := validSubtypesCode , (String with: Character cr)
				, '	result add: self validSubtypesFor' , classSpecification name
				, '.' ].
	validSubtypesCode := validSubtypesCode , (String with: Character cr)
		, '	^ result.'.
	^ validSubtypesCode
]

{ #category : #updating }
AllowedSubtypesVerification class >> getValidSubtypesForCode: aStereotype fromCollection: aCollection [
	| methodTemplate |
	self checkStringForCodeInjection: aStereotype.
	methodTemplate := '"I return association between OntoUML element stereotype '
		, aStereotype , ' and its allowed subtypes.', (String with: Character cr)
		, ' I am generated by getValidSubtypesFor:FromCollection: and tested by testValidSubtypesFor"'
		, (String with: Character cr) , 'validSubtypesFor' , aStereotype
		, (String with: Character cr) , '	^ OntoUML' , aStereotype , ' -> { '.
	aCollection
		do: [ :item | self checkStringForCodeInjection: item.
			 methodTemplate := methodTemplate , 'OntoUML' , item , '. ' ].
	methodTemplate := methodTemplate , '}.'.
	^ methodTemplate.
]

{ #category : #updating }
AllowedSubtypesVerification class >> setValidSubtypesFor: aStereotype fromCollection: aCollection [
	| validSubtypesForCode |
	validSubtypesForCode := self getValidSubtypesForCode: aStereotype fromCollection: aCollection.
	self updateMessage: validSubtypesForCode withClassification: 'constants'.
]

{ #category : #updating }
AllowedSubtypesVerification class >> updateFrom: aVerificationUpdater [
	| updatedMessageCode |
	updatedMessageCode := self getUpdatedMessageCode: aVerificationUpdater.
	aVerificationUpdater classSpecifications do: [ :classSpecification |
		self setValidSubtypesFor: classSpecification name fromCollection: classSpecification subtypes. ]. 	
	self updateMessage: updatedMessageCode  withClassification: 'constants'.
	
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypes [
	| result |
	result := Dictionary new.
	result add: self validSubtypesForKind.
	result add: self validSubtypesForSubKind.
	result add: self validSubtypesForCollective.
	result add: self validSubtypesForPhase.
	result add: self validSubtypesForQuantity.
	result add: self validSubtypesForRelator.
	result add: self validSubtypesForRole.
	result add: self validSubtypesForMode.
	result add: self validSubtypesForQuality.
	result add: self validSubtypesForCategory.
	result add: self validSubtypesForMixin.
	result add: self validSubtypesForRoleMixin.
	result add: self validSubtypesForPhaseMixin.
	^ result.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForCategory [
	^ OntoUMLCategory -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLQuantity. OntoUMLRelator. OntoUMLCategory. OntoUMLMode. OntoUMLQuality. OntoUMLRole. OntoUMLPhase. OntoUMLRoleMixin. OntoUMLPhaseMixin. OntoUMLMixin. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForCollective [
	^ OntoUMLCollective -> { OntoUMLSubKind. OntoUMLPhase. OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForKind [
	^ OntoUMLKind -> { OntoUMLSubKind. OntoUMLPhase. OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForMixin [
	^ OntoUMLMixin -> { OntoUMLSubKind. OntoUMLKind. OntoUMLCollective. OntoUMLQuantity. OntoUMLCategory. OntoUMLMixin. OntoUMLRole. OntoUMLPhase. OntoUMLRoleMixin. OntoUMLPhaseMixin. OntoUMLRelator. OntoUMLQuality. OntoUMLMode. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForMode [
	^ OntoUMLMode -> { OntoUMLSubKind. OntoUMLRole. OntoUMLPhase. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForPhase [
	^ OntoUMLPhase -> { OntoUMLPhase. OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForPhaseMixin [
	^ OntoUMLPhaseMixin -> { OntoUMLPhase. OntoUMLPhaseMixin. OntoUMLRole. OntoUMLRoleMixin. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForQuality [
	^ OntoUMLQuality -> { OntoUMLSubKind. OntoUMLRole. OntoUMLPhase. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForQuantity [
	^ OntoUMLQuantity -> { OntoUMLSubKind. OntoUMLPhase. OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForRelator [
	^ OntoUMLRelator -> { OntoUMLSubKind. OntoUMLPhase. OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForRole [
	^ OntoUMLRole -> { OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForRoleMixin [
	^ OntoUMLRoleMixin -> { OntoUMLRole. OntoUMLRoleMixin. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> validSubtypesForSubKind [
	^ OntoUMLSubKind -> { OntoUMLSubKind. OntoUMLPhase. OntoUMLRole. }.
]

{ #category : #constants }
AllowedSubtypesVerification class >> verifiedClass [
	^ OPUMLGeneralization.
]

{ #category : #verification }
AllowedSubtypesVerification >> verifyObject: aVerifiedGeneralization withModel: aVerifiedModel [
	| generalStereotype specificStereotype |
	generalStereotype := self class getStereotype: aVerifiedGeneralization general.
	specificStereotype := self class getStereotype: aVerifiedGeneralization specific.
	(generalStereotype isNil or: specificStereotype isNil) ifTrue: [ ^ {} ].
	((self class validSubtypes at: generalStereotype class) 
		anySatisfy: [ :class | specificStereotype class = class ])
			ifFalse:[ ^ {VerificationMessageError createFor: aVerifiedGeneralization withVerification: self withText: (specificStereotype class name , ' cannot be subtype of ' , generalStereotype class name ,'.') documentationReference: (OntoUMLDotOrgReferences getDefinitionReferenceFor: aVerifiedGeneralization specific) } ].
	^ {}.
]
