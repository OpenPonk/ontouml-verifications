"
I am verification for IdentityRequired rule. 

Overriden methods: verifiedClass, verifyObject:withModel:, verifiedStereotypes.

New methods: identityProviders, hasIdentity:, getSuperClassesFromModel:, countIdentitySources:fromModel:withAccumulator:.
"
Class {
	#name : #IdentityRequiredVerification,
	#superclass : #StereotypeVerification,
	#traits : 'TCodeInjectionChecker + TClassUpdater',
	#classTraits : 'TCodeInjectionChecker classTrait + TClassUpdater classTrait',
	#category : #'OntoUML-VerificationFramework-Verification-Classes'
}

{ #category : #constants }
IdentityRequiredVerification class >> abbreviation [
	^ 'IdentityRequired'.
]

{ #category : #updating }
IdentityRequiredVerification class >> getUpdatedMessageCode: aVerificationUpdater [
	| identityProvidersCode |
	identityProvidersCode := '"I return list of all OntoUML identity providers.
Code generated by getUpdatedMessageCode." 
identityProviders
	^ { '.
	(aVerificationUpdater classSpecifications select: [ :classSpecification | classSpecification providesIdentity ])
		do: [ :classSpec | self checkStringForCodeInjection: classSpec name.
			identityProvidersCode := identityProvidersCode , 'OntoUML' , classSpec name , '. ' ].
	identityProvidersCode := identityProvidersCode , '}'.
	^ identityProvidersCode.
]

{ #category : #constants }
IdentityRequiredVerification class >> identityProviders [
	^ { OntoUMLKind. OntoUMLCollective. OntoUMLQuantity. OntoUMLRelator. OntoUMLMode. OntoUMLQuality. }
]

{ #category : #updating }
IdentityRequiredVerification class >> updateFrom: aVerificationUpdater [
	| identityProvidersCode |
	identityProvidersCode := self getUpdatedMessageCode: aVerificationUpdater.
	self updateMessage: identityProvidersCode withClassification: 'constants'.
]

{ #category : #constants }
IdentityRequiredVerification class >> verifiedClass [
	^ OPUMLClass.
]

{ #category : #constants }
IdentityRequiredVerification class >> verifiedStereotypes [
	^ {OntoUMLSubKind. OntoUMLPhase. OntoUMLRole.}.
]

{ #category : #verification }
IdentityRequiredVerification >> countIdentitySources: aVerifiedObject fromModel: aVerifiedModel withAccumulator: aVerificationAccumulator [
	| stereotype superclasses results |
	(aVerificationAccumulator anySatisfy: [ :element | element = aVerifiedObject ]) ifTrue: [ ^ Float negativeInfinity. ].
	aVerificationAccumulator add: aVerifiedObject.
	stereotype := self class getStereotype: aVerifiedObject.
	(self hasIdentity: stereotype) ifTrue: [ ^ 1 ].
	results := 0.
	superclasses := self getSuperClasses: aVerifiedObject fromModel: aVerifiedModel.
	superclasses do: [ :superclass | results := results + (self countIdentitySources: superclass fromModel: aVerifiedModel withAccumulator: aVerificationAccumulator) ].
	^ results.
]

{ #category : #verification }
IdentityRequiredVerification >> getSuperClasses: aVerifiedObject fromModel: aVerifiedModel [
	^ ((aVerifiedModel select: [ :element | element class = OPUMLGeneralization ])
		select: [ :generalizaion | generalizaion  specific = aVerifiedObject ])
			collect: [ :generalization | generalization general ].
]

{ #category : #verification }
IdentityRequiredVerification >> hasIdentity: aVerifiedStereotype [
	^ self class identityProviders anySatisfy: [ :identityProvider | identityProvider = aVerifiedStereotype class ].
]

{ #category : #verification }
IdentityRequiredVerification >> verifyObject: aVerifiedObject withModel: aVerifiedModel [
	| identityCount verificationAccumulator |
	verificationAccumulator := Set new.
	identityCount := self countIdentitySources: aVerifiedObject fromModel: aVerifiedModel  withAccumulator: verificationAccumulator.
	identityCount < 0 ifTrue: [ ^{VerificationMessageError createFor: aVerifiedObject withVerification: self withText: (self class getStereotype: aVerifiedObject) class name, ' has loop in generalisation structure.'} ].
	identityCount = 0 ifTrue: [ ^{VerificationMessageError createFor: aVerifiedObject withVerification: self withText: (self class getStereotype: aVerifiedObject) class name, ' has no identity.'} ].
	identityCount > 1 ifTrue: [ ^{VerificationMessageError createFor: aVerifiedObject withVerification: self withText: (self class getStereotype: aVerifiedObject) class name, ' has multiple identity sources.'} ].
	^ {}.
	
]
