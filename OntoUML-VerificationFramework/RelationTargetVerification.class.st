"
I am verification for RelationTarget rule. 

Overriden methods: verifiedClass, verifyObject:withModel:

New methods: validTargets.
"
Class {
	#name : 'RelationTargetVerification',
	#superclass : 'RelationEndVerification',
	#traits : 'TCodeInjectionChecker + TClassUpdater',
	#classTraits : 'TCodeInjectionChecker classTrait + TClassUpdater classTrait',
	#category : 'OntoUML-VerificationFramework-Verification-Classes',
	#package : 'OntoUML-VerificationFramework',
	#tag : 'Verification-Classes'
}

{ #category : 'constants' }
RelationTargetVerification class >> abbreviation [
	^ 'RelationTarget'.
]

{ #category : 'updating' }
RelationTargetVerification class >> getUpdatedMessageCode: aVerificationUpdater [
	| validTargetsCode |
	validTargetsCode := 'validTargets
	"I return dictionary containing collections of allowed targets for each OntoUML relationship stereotype.
	Code generated by getUpdatedMessageCode."

	| result |
	result := Dictionary new.'.
	aVerificationUpdater relationshipSpecifications
		do: [ :relationshipSpecification | self checkStringForCodeInjection: relationshipSpecification name.
			validTargetsCode := validTargetsCode , (String with: Character cr)
				, '	result add: self validTargetsFor'
				, relationshipSpecification name , '.' ].
	validTargetsCode := validTargetsCode , (String with: Character cr)
		, '	^ result.'.
	^ validTargetsCode.
]

{ #category : 'updating' }
RelationTargetVerification class >> getValidTargetsFor: aRelationship fromCollection: aCollection [

	| methodTemplate |
	self checkStringForCodeInjection: aRelationship.
	methodTemplate := 'validTargetsFor' , aRelationship , String cr
	                  ,
	                  '	"I return association between OntoUML relationship stereotype '
	                  , aRelationship , ' and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."'
	                  , String cr , String cr , '	^ OntoUML'
	                  , aRelationship , ' -> { '.
	aCollection do: [ :item |
		self checkStringForCodeInjection: item capitalized.
		methodTemplate := methodTemplate , 'OntoUML' , item capitalized
		                  , '. ' ].
	methodTemplate := methodTemplate , '}.'.
	^ methodTemplate
]

{ #category : 'updating' }
RelationTargetVerification class >> setValidTargetsFor: aRelationship fromCollection: aCollection [
	| validTargetsForCode |
	validTargetsForCode := self getValidTargetsFor: aRelationship fromCollection: aCollection.
	self updateMessage: validTargetsForCode withClassification: 'constants'.
]

{ #category : 'updating' }
RelationTargetVerification class >> updateFrom: aVerificationUpdater [
	| updatedMessageCode |
	updatedMessageCode := self getUpdatedMessageCode: aVerificationUpdater.
	aVerificationUpdater relationshipSpecifications do: [ :relationshipSpecification |
		self setValidTargetsFor: relationshipSpecification name fromCollection: 
		(self expandAllowedClassStereotypesIn: (relationshipSpecification allowedTargets) from: aVerificationUpdater). ]. 	
	self updateMessage: updatedMessageCode  withClassification: 'constants'.
	
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargets [
	"I return dictionary containing collections of allowed targets for each OntoUML relationship stereotype.
	Code generated by getUpdatedMessageCode."

	| result |
	result := Dictionary new.
	result add: self validTargetsForComponentOf.
	result add: self validTargetsForContainment.
	result add: self validTargetsForMemberOf.
	result add: self validTargetsForSubCollectionOf.
	result add: self validTargetsForSubQuantityOf.
	result add: self validTargetsForCharacterization.
	result add: self validTargetsForDerivation.
	result add: self validTargetsForDomainFormal.
	result add: self validTargetsForMaterial.
	result add: self validTargetsForMediation.
	^ result.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForCharacterization [
	"I return association between OntoUML relationship stereotype Characterization and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLCharacterization -> { OntoUMLMode. OntoUMLQuality. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForComponentOf [
	"I return association between OntoUML relationship stereotype ComponentOf and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLComponentOf -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForContainment [
	"I return association between OntoUML relationship stereotype Containment and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLContainment -> { OntoUMLQuantity. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForDerivation [
	"I return association between OntoUML relationship stereotype Derivation and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLDerivation -> { OntoUMLMaterial. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForDomainFormal [
	"I return association between OntoUML relationship stereotype DomainFormal and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLDomainFormal -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForFormal [
	^ OntoUMLFormal -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForMaterial [
	"I return association between OntoUML relationship stereotype Material and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLMaterial -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForMediation [
	"I return association between OntoUML relationship stereotype Mediation and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLMediation -> { OntoUMLKind. OntoUMLSubKind. OntoUMLCollective. OntoUMLPhase. OntoUMLQuantity. OntoUMLRelator. OntoUMLRole. OntoUMLMode. OntoUMLQuality. OntoUMLCategory. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForMemberOf [
	"I return association between OntoUML relationship stereotype MemberOf and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLMemberOf -> { OntoUMLQuantity. OntoUMLQuality. OntoUMLMixin. OntoUMLRoleMixin. OntoUMLPhaseMixin. OntoUMLRelator. OntoUMLCategory. OntoUMLSubKind. OntoUMLMode. OntoUMLRole. OntoUMLPhase. OntoUMLCollective. OntoUMLKind. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForSubCollectionOf [
	"I return association between OntoUML relationship stereotype SubCollectionOf and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLSubCollectionOf -> { OntoUMLCollective. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> validTargetsForSubQuantityOf [
	"I return association between OntoUML relationship stereotype SubQuantityOf and its allowed targets.
	I am generated by getValidTargetsFor:FromCollection: and tested by testGetValidTargetsForFromCollection."

	^ OntoUMLSubQuantityOf -> { OntoUMLQuantity. }.
]

{ #category : 'constants' }
RelationTargetVerification class >> verifiedClass [
	^ OPUMLAssociation.
]

{ #category : 'verification' }
RelationTargetVerification >> getErrorMessageFor: aEnd withAssociation: aAssociation [
	| endStereotypeName associationStereotypeName |
	endStereotypeName := (self class getStereotypeClass: aEnd) name.
	associationStereotypeName := (self class getStereotypeClass: aAssociation) name.
	^ VerificationMessageError createFor: aAssociation
			withVerification: self
			withText: endStereotypeName , ' cannot be target of ' , associationStereotypeName , ' association'.
]

{ #category : 'verification' }
RelationTargetVerification >> getVerifiedEnd: aVerifiedAssociation [
	^ (aVerifiedAssociation memberEnds at: 2) type.
]

{ #category : 'verification' }
RelationTargetVerification >> validStereotypesForEnd [
	^ self class validTargets.
]
